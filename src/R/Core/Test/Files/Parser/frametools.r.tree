GlobalScope  [Global]
    ExpressionStatement  [subset.data.frame <- function (x, subset, select, drop = FALSE, ...)\n{\n    r <- if(missing(subset))\n	rep_len(TRUE, nrow(x))\n    else {\n	e <- substitute(subset)\n	r <- eval(e, x, parent.frame())\n        if(!is.logical(r)) stop("'subset' must be logical")\n	r & !is.na(r)\n    }\n    vars <- if(missing(select))\n	TRUE\n    else {\n	nl <- as.list(seq_along(x))\n	names(nl) <- names(x)\n	eval(substitute(select), nl, parent.frame())\n    }\n    ## PR#15823 suggested that sometimes which(r) would be faster,\n    ## but this is not intended for programmatic use and the\n    ## difference is tens of ms on a 1 million-row data frame.\n    x[r, vars, drop = drop]\n}]
        Expression  [subset.data.frame <- function (x, subset, select, drop = FALSE, ...)\n{\n    r <- if(missing(subset))\n	rep_len(TRUE, nrow(x))\n    else {\n	e <- substitute(subset)\n	r <- eval(e, x, parent.frame())\n        if(!is.logical(r)) stop("'subset' must be logical")\n	r & !is.na(r)\n    }\n    vars <- if(missing(select))\n	TRUE\n    else {\n	nl <- as.list(seq_along(x))\n	names(nl) <- names(x)\n	eval(substitute(select), nl, parent.frame())\n    }\n    ## PR#15823 suggested that sometimes which(r) would be faster,\n    ## but this is not intended for programmatic use and the\n    ## difference is tens of ms on a 1 million-row data frame.\n    x[r, vars, drop = drop]\n}]
            TokenOperator  [<- [757...759)]
                Variable  [subset.data.frame]
                TokenNode  [<- [757...759)]
                FunctionDefinition  [760...1386)
                    TokenNode  [function [760...768)]
                    TokenNode  [( [769...770)]
                    ArgumentList  [770...806)
                        ExpressionArgument  [770...772)
                            Expression  [x]
                                Variable  [x]
                            TokenNode  [, [771...772)]
                        ExpressionArgument  [773...780)
                            Expression  [subset]
                                Variable  [subset]
                            TokenNode  [, [779...780)]
                        ExpressionArgument  [781...788)
                            Expression  [select]
                                Variable  [select]
                            TokenNode  [, [787...788)]
                        NamedArgument  [789...802)
                            TokenNode  [drop [789...793)]
                            TokenNode  [= [794...795)]
                            Expression  [FALSE]
                                LogicalValue  [FALSE [796...801)]
                            TokenNode  [, [801...802)]
                        EllipsisArgument  [...]
                            TokenNode  [... [803...806)]
                    TokenNode  [) [806...807)]
                    Scope  []
                        TokenNode  [{ [808...809)]
                        ExpressionStatement  [r <- if(missing(subset))\n	rep_len(TRUE, nrow(x))\n    else {\n	e <- substitute(subset)\n	r <- eval(e, x, parent.frame())\n        if(!is.logical(r)) stop("'subset' must be logical")\n	r & !is.na(r)\n    }]
                            Expression  [r <- if(missing(subset))\n	rep_len(TRUE, nrow(x))\n    else {\n	e <- substitute(subset)\n	r <- eval(e, x, parent.frame())\n        if(!is.logical(r)) stop("'subset' must be logical")\n	r & !is.na(r)\n    }]
                                TokenOperator  [<- [816...818)]
                                    Variable  [r]
                                    TokenNode  [<- [816...818)]
                                    InlineIf  []
                                        TokenNode  [if [819...821)]
                                        TokenNode  [( [821...822)]
                                        Expression  [missing(subset)]
                                            FunctionCall  [822...837)
                                                Variable  [missing]
                                                TokenNode  [( [829...830)]
                                                ArgumentList  [830...836)
                                                    ExpressionArgument  [830...836)
                                                        Expression  [subset]
                                                            Variable  [subset]
                                                TokenNode  [) [836...837)]
                                        TokenNode  [) [837...838)]
                                        SimpleScope  [840...862)
                                            ExpressionStatement  [rep_len(TRUE, nrow(x))]
                                                Expression  [rep_len(TRUE, nrow(x))]
                                                    FunctionCall  [840...862)
                                                        Variable  [rep_len]
                                                        TokenNode  [( [847...848)]
                                                        ArgumentList  [848...861)
                                                            ExpressionArgument  [848...853)
                                                                Expression  [TRUE]
                                                                    LogicalValue  [TRUE [848...852)]
                                                                TokenNode  [, [852...853)]
                                                            ExpressionArgument  [854...861)
                                                                Expression  [nrow(x)]
                                                                    FunctionCall  [854...861)
                                                                        Variable  [nrow]
                                                                        TokenNode  [( [858...859)]
                                                                        ArgumentList  [859...860)
                                                                            ExpressionArgument  [859...860)
                                                                                Expression  [x]
                                                                                    Variable  [x]
                                                                        TokenNode  [) [860...861)]
                                                        TokenNode  [) [861...862)]
                                        KeywordScopeStatement  []
                                            TokenNode  [else [867...871)]
                                            Scope  []
                                                TokenNode  [{ [872...873)]
                                                ExpressionStatement  [e <- substitute(subset)]
                                                    Expression  [e <- substitute(subset)]
                                                        TokenOperator  [<- [877...879)]
                                                            Variable  [e]
                                                            TokenNode  [<- [877...879)]
                                                            FunctionCall  [880...898)
                                                                Variable  [substitute]
                                                                TokenNode  [( [890...891)]
                                                                ArgumentList  [891...897)
                                                                    ExpressionArgument  [891...897)
                                                                        Expression  [subset]
                                                                            Variable  [subset]
                                                                TokenNode  [) [897...898)]
                                                ExpressionStatement  [r <- eval(e, x, parent.frame())]
                                                    Expression  [r <- eval(e, x, parent.frame())]
                                                        TokenOperator  [<- [902...904)]
                                                            Variable  [r]
                                                            TokenNode  [<- [902...904)]
                                                            FunctionCall  [905...931)
                                                                Variable  [eval]
                                                                TokenNode  [( [909...910)]
                                                                ArgumentList  [910...930)
                                                                    ExpressionArgument  [910...912)
                                                                        Expression  [e]
                                                                            Variable  [e]
                                                                        TokenNode  [, [911...912)]
                                                                    ExpressionArgument  [913...915)
                                                                        Expression  [x]
                                                                            Variable  [x]
                                                                        TokenNode  [, [914...915)]
                                                                    ExpressionArgument  [916...930)
                                                                        Expression  [parent.frame()]
                                                                            FunctionCall  [916...930)
                                                                                Variable  [parent.frame]
                                                                                TokenNode  [( [928...929)]
                                                                                TokenNode  [) [929...930)]
                                                                TokenNode  [) [930...931)]
                                                If  []
                                                    TokenNode  [if [940...942)]
                                                    TokenNode  [( [942...943)]
                                                    Expression  [!is.logical(r)]
                                                        TokenOperator  [! [943...944)]
                                                            TokenNode  [! [943...944)]
                                                            FunctionCall  [944...957)
                                                                Variable  [is.logical]
                                                                TokenNode  [( [954...955)]
                                                                ArgumentList  [955...956)
                                                                    ExpressionArgument  [955...956)
                                                                        Expression  [r]
                                                                            Variable  [r]
                                                                TokenNode  [) [956...957)]
                                                    TokenNode  [) [957...958)]
                                                    SimpleScope  [959...991)
                                                        ExpressionStatement  [stop("'subset' must be logical")]
                                                            Expression  [stop("'subset' must be logical")]
                                                                FunctionCall  [959...991)
                                                                    Variable  [stop]
                                                                    TokenNode  [( [963...964)]
                                                                    ArgumentList  [964...990)
                                                                        ExpressionArgument  [964...990)
                                                                            Expression  ["'subset' must be logical"]
                                                                                Variable  ["'subset' must be logical"]
                                                                    TokenNode  [) [990...991)]
                                                ExpressionStatement  [r & !is.na(r)]
                                                    Expression  [r & !is.na(r)]
                                                        TokenOperator  [& [995...996)]
                                                            Variable  [r]
                                                            TokenNode  [& [995...996)]
                                                            TokenOperator  [! [997...998)]
                                                                TokenNode  [! [997...998)]
                                                                FunctionCall  [998...1006)
                                                                    Variable  [is.na]
                                                                    TokenNode  [( [1003...1004)]
                                                                    ArgumentList  [1004...1005)
                                                                        ExpressionArgument  [1004...1005)
                                                                            Expression  [r]
                                                                                Variable  [r]
                                                                    TokenNode  [) [1005...1006)]
                                                TokenNode  [} [1011...1012)]
                        ExpressionStatement  [vars <- if(missing(select))\n	TRUE\n    else {\n	nl <- as.list(seq_along(x))\n	names(nl) <- names(x)\n	eval(substitute(select), nl, parent.frame())\n    }]
                            Expression  [vars <- if(missing(select))\n	TRUE\n    else {\n	nl <- as.list(seq_along(x))\n	names(nl) <- names(x)\n	eval(substitute(select), nl, parent.frame())\n    }]
                                TokenOperator  [<- [1022...1024)]
                                    Variable  [vars]
                                    TokenNode  [<- [1022...1024)]
                                    InlineIf  []
                                        TokenNode  [if [1025...1027)]
                                        TokenNode  [( [1027...1028)]
                                        Expression  [missing(select)]
                                            FunctionCall  [1028...1043)
                                                Variable  [missing]
                                                TokenNode  [( [1035...1036)]
                                                ArgumentList  [1036...1042)
                                                    ExpressionArgument  [1036...1042)
                                                        Expression  [select]
                                                            Variable  [select]
                                                TokenNode  [) [1042...1043)]
                                        TokenNode  [) [1043...1044)]
                                        SimpleScope  [1046...1050)
                                            ExpressionStatement  [TRUE]
                                                Expression  [TRUE]
                                                    LogicalValue  [TRUE [1046...1050)]
                                        KeywordScopeStatement  []
                                            TokenNode  [else [1055...1059)]
                                            Scope  []
                                                TokenNode  [{ [1060...1061)]
                                                ExpressionStatement  [nl <- as.list(seq_along(x))]
                                                    Expression  [nl <- as.list(seq_along(x))]
                                                        TokenOperator  [<- [1066...1068)]
                                                            Variable  [nl]
                                                            TokenNode  [<- [1066...1068)]
                                                            FunctionCall  [1069...1090)
                                                                Variable  [as.list]
                                                                TokenNode  [( [1076...1077)]
                                                                ArgumentList  [1077...1089)
                                                                    ExpressionArgument  [1077...1089)
                                                                        Expression  [seq_along(x)]
                                                                            FunctionCall  [1077...1089)
                                                                                Variable  [seq_along]
                                                                                TokenNode  [( [1086...1087)]
                                                                                ArgumentList  [1087...1088)
                                                                                    ExpressionArgument  [1087...1088)
                                                                                        Expression  [x]
                                                                                            Variable  [x]
                                                                                TokenNode  [) [1088...1089)]
                                                                TokenNode  [) [1089...1090)]
                                                ExpressionStatement  [names(nl) <- names(x)]
                                                    Expression  [names(nl) <- names(x)]
                                                        TokenOperator  [<- [1102...1104)]
                                                            FunctionCall  [1092...1101)
                                                                Variable  [names]
                                                                TokenNode  [( [1097...1098)]
                                                                ArgumentList  [1098...1100)
                                                                    ExpressionArgument  [1098...1100)
                                                                        Expression  [nl]
                                                                            Variable  [nl]
                                                                TokenNode  [) [1100...1101)]
                                                            TokenNode  [<- [1102...1104)]
                                                            FunctionCall  [1105...1113)
                                                                Variable  [names]
                                                                TokenNode  [( [1110...1111)]
                                                                ArgumentList  [1111...1112)
                                                                    ExpressionArgument  [1111...1112)
                                                                        Expression  [x]
                                                                            Variable  [x]
                                                                TokenNode  [) [1112...1113)]
                                                ExpressionStatement  [eval(substitute(select), nl, parent.frame())]
                                                    Expression  [eval(substitute(select), nl, parent.frame())]
                                                        FunctionCall  [1115...1159)
                                                            Variable  [eval]
                                                            TokenNode  [( [1119...1120)]
                                                            ArgumentList  [1120...1158)
                                                                ExpressionArgument  [1120...1139)
                                                                    Expression  [substitute(select)]
                                                                        FunctionCall  [1120...1138)
                                                                            Variable  [substitute]
                                                                            TokenNode  [( [1130...1131)]
                                                                            ArgumentList  [1131...1137)
                                                                                ExpressionArgument  [1131...1137)
                                                                                    Expression  [select]
                                                                                        Variable  [select]
                                                                            TokenNode  [) [1137...1138)]
                                                                    TokenNode  [, [1138...1139)]
                                                                ExpressionArgument  [1140...1143)
                                                                    Expression  [nl]
                                                                        Variable  [nl]
                                                                    TokenNode  [, [1142...1143)]
                                                                ExpressionArgument  [1144...1158)
                                                                    Expression  [parent.frame()]
                                                                        FunctionCall  [1144...1158)
                                                                            Variable  [parent.frame]
                                                                            TokenNode  [( [1156...1157)]
                                                                            TokenNode  [) [1157...1158)]
                                                            TokenNode  [) [1158...1159)]
                                                TokenNode  [} [1164...1165)]
                        ExpressionStatement  [x[r, vars, drop = drop]]
                            Expression  [x[r, vars, drop = drop]]
                                Indexer  [1361...1384)
                                    Variable  [x]
                                    TokenNode  [[ [1362...1363)]
                                    ArgumentList  [1363...1383)
                                        ExpressionArgument  [1363...1365)
                                            Expression  [r]
                                                Variable  [r]
                                            TokenNode  [, [1364...1365)]
                                        ExpressionArgument  [1366...1371)
                                            Expression  [vars]
                                                Variable  [vars]
                                            TokenNode  [, [1370...1371)]
                                        NamedArgument  [1372...1383)
                                            TokenNode  [drop [1372...1376)]
                                            TokenNode  [= [1377...1378)]
                                            Expression  [drop]
                                                Variable  [drop]
                                    TokenNode  [] [1383...1384)]
                        TokenNode  [} [1385...1386)]
    ExpressionStatement  [subset <- function(x, ...) UseMethod("subset")]
        Expression  [subset <- function(x, ...) UseMethod("subset")]
            TokenOperator  [<- [1395...1397)]
                Variable  [subset]
                TokenNode  [<- [1395...1397)]
                FunctionDefinition  [1398...1434)
                    TokenNode  [function [1398...1406)]
                    TokenNode  [( [1406...1407)]
                    ArgumentList  [1407...1413)
                        ExpressionArgument  [1407...1409)
                            Expression  [x]
                                Variable  [x]
                            TokenNode  [, [1408...1409)]
                        EllipsisArgument  [...]
                            TokenNode  [... [1410...1413)]
                    TokenNode  [) [1413...1414)]
                    SimpleScope  [1415...1434)
                        ExpressionStatement  [UseMethod("subset")]
                            Expression  [UseMethod("subset")]
                                FunctionCall  [1415...1434)
                                    Variable  [UseMethod]
                                    TokenNode  [( [1424...1425)]
                                    ArgumentList  [1425...1433)
                                        ExpressionArgument  [1425...1433)
                                            Expression  ["subset"]
                                                Variable  ["subset"]
                                    TokenNode  [) [1433...1434)]
    ExpressionStatement  [subset.default <- function(x, subset, ...) {\n    if(!is.logical(subset)) stop("'subset' must be logical")\n    x[subset & !is.na(subset)]\n}]
        Expression  [subset.default <- function(x, subset, ...) {\n    if(!is.logical(subset)) stop("'subset' must be logical")\n    x[subset & !is.na(subset)]\n}]
            TokenOperator  [<- [1451...1453)]
                Variable  [subset.default]
                TokenNode  [<- [1451...1453)]
                FunctionDefinition  [1454...1574)
                    TokenNode  [function [1454...1462)]
                    TokenNode  [( [1462...1463)]
                    ArgumentList  [1463...1477)
                        ExpressionArgument  [1463...1465)
                            Expression  [x]
                                Variable  [x]
                            TokenNode  [, [1464...1465)]
                        ExpressionArgument  [1466...1473)
                            Expression  [subset]
                                Variable  [subset]
                            TokenNode  [, [1472...1473)]
                        EllipsisArgument  [...]
                            TokenNode  [... [1474...1477)]
                    TokenNode  [) [1477...1478)]
                    Scope  []
                        TokenNode  [{ [1479...1480)]
                        If  []
                            TokenNode  [if [1485...1487)]
                            TokenNode  [( [1487...1488)]
                            Expression  [!is.logical(subset)]
                                TokenOperator  [! [1488...1489)]
                                    TokenNode  [! [1488...1489)]
                                    FunctionCall  [1489...1507)
                                        Variable  [is.logical]
                                        TokenNode  [( [1499...1500)]
                                        ArgumentList  [1500...1506)
                                            ExpressionArgument  [1500...1506)
                                                Expression  [subset]
                                                    Variable  [subset]
                                        TokenNode  [) [1506...1507)]
                            TokenNode  [) [1507...1508)]
                            SimpleScope  [1509...1541)
                                ExpressionStatement  [stop("'subset' must be logical")]
                                    Expression  [stop("'subset' must be logical")]
                                        FunctionCall  [1509...1541)
                                            Variable  [stop]
                                            TokenNode  [( [1513...1514)]
                                            ArgumentList  [1514...1540)
                                                ExpressionArgument  [1514...1540)
                                                    Expression  ["'subset' must be logical"]
                                                        Variable  ["'subset' must be logical"]
                                            TokenNode  [) [1540...1541)]
                        ExpressionStatement  [x[subset & !is.na(subset)]]
                            Expression  [x[subset & !is.na(subset)]]
                                Indexer  [1546...1572)
                                    Variable  [x]
                                    TokenNode  [[ [1547...1548)]
                                    ArgumentList  [1548...1571)
                                        ExpressionArgument  [1548...1571)
                                            Expression  [subset & !is.na(subset)]
                                                TokenOperator  [& [1555...1556)]
                                                    Variable  [subset]
                                                    TokenNode  [& [1555...1556)]
                                                    TokenOperator  [! [1557...1558)]
                                                        TokenNode  [! [1557...1558)]
                                                        FunctionCall  [1558...1571)
                                                            Variable  [is.na]
                                                            TokenNode  [( [1563...1564)]
                                                            ArgumentList  [1564...1570)
                                                                ExpressionArgument  [1564...1570)
                                                                    Expression  [subset]
                                                                        Variable  [subset]
                                                            TokenNode  [) [1570...1571)]
                                    TokenNode  [] [1571...1572)]
                        TokenNode  [} [1573...1574)]
    ExpressionStatement  [subset.matrix <- function(x, subset, select, drop = FALSE, ...)\n{\n    if(missing(select))\n	vars <- TRUE\n    else {\n	nl <- as.list(1L:ncol(x))\n	names(nl) <- colnames(x)\n	vars <- eval(substitute(select), nl, parent.frame())\n    }\n    if(missing(subset)) subset <- TRUE\n    else if(!is.logical(subset)) stop("'subset' must be logical")\n    x[subset & !is.na(subset), vars, drop = drop]\n}]
        Expression  [subset.matrix <- function(x, subset, select, drop = FALSE, ...)\n{\n    if(missing(select))\n	vars <- TRUE\n    else {\n	nl <- as.list(1L:ncol(x))\n	names(nl) <- colnames(x)\n	vars <- eval(substitute(select), nl, parent.frame())\n    }\n    if(missing(subset)) subset <- TRUE\n    else if(!is.logical(subset)) stop("'subset' must be logical")\n    x[subset & !is.na(subset), vars, drop = drop]\n}]
            TokenOperator  [<- [1590...1592)]
                Variable  [subset.matrix]
                TokenNode  [<- [1590...1592)]
                FunctionDefinition  [1593...1960)
                    TokenNode  [function [1593...1601)]
                    TokenNode  [( [1601...1602)]
                    ArgumentList  [1602...1638)
                        ExpressionArgument  [1602...1604)
                            Expression  [x]
                                Variable  [x]
                            TokenNode  [, [1603...1604)]
                        ExpressionArgument  [1605...1612)
                            Expression  [subset]
                                Variable  [subset]
                            TokenNode  [, [1611...1612)]
                        ExpressionArgument  [1613...1620)
                            Expression  [select]
                                Variable  [select]
                            TokenNode  [, [1619...1620)]
                        NamedArgument  [1621...1634)
                            TokenNode  [drop [1621...1625)]
                            TokenNode  [= [1626...1627)]
                            Expression  [FALSE]
                                LogicalValue  [FALSE [1628...1633)]
                            TokenNode  [, [1633...1634)]
                        EllipsisArgument  [...]
                            TokenNode  [... [1635...1638)]
                    TokenNode  [) [1638...1639)]
                    Scope  []
                        TokenNode  [{ [1640...1641)]
                        If  []
                            TokenNode  [if [1646...1648)]
                            TokenNode  [( [1648...1649)]
                            Expression  [missing(select)]
                                FunctionCall  [1649...1664)
                                    Variable  [missing]
                                    TokenNode  [( [1656...1657)]
                                    ArgumentList  [1657...1663)
                                        ExpressionArgument  [1657...1663)
                                            Expression  [select]
                                                Variable  [select]
                                    TokenNode  [) [1663...1664)]
                            TokenNode  [) [1664...1665)]
                            SimpleScope  [1667...1679)
                                ExpressionStatement  [vars <- TRUE]
                                    Expression  [vars <- TRUE]
                                        TokenOperator  [<- [1672...1674)]
                                            Variable  [vars]
                                            TokenNode  [<- [1672...1674)]
                                            LogicalValue  [TRUE [1675...1679)]
                            KeywordScopeStatement  []
                                TokenNode  [else [1684...1688)]
                                Scope  []
                                    TokenNode  [{ [1689...1690)]
                                    ExpressionStatement  [nl <- as.list(1L:ncol(x))]
                                        Expression  [nl <- as.list(1L:ncol(x))]
                                            TokenOperator  [<- [1695...1697)]
                                                Variable  [nl]
                                                TokenNode  [<- [1695...1697)]
                                                FunctionCall  [1698...1717)
                                                    Variable  [as.list]
                                                    TokenNode  [( [1705...1706)]
                                                    ArgumentList  [1706...1716)
                                                        ExpressionArgument  [1706...1716)
                                                            Expression  [1L:ncol(x)]
                                                                TokenOperator  [: [1708...1709)]
                                                                    NumericalValue  [1L [1706...1708)]
                                                                    TokenNode  [: [1708...1709)]
                                                                    FunctionCall  [1709...1716)
                                                                        Variable  [ncol]
                                                                        TokenNode  [( [1713...1714)]
                                                                        ArgumentList  [1714...1715)
                                                                            ExpressionArgument  [1714...1715)
                                                                                Expression  [x]
                                                                                    Variable  [x]
                                                                        TokenNode  [) [1715...1716)]
                                                    TokenNode  [) [1716...1717)]
                                    ExpressionStatement  [names(nl) <- colnames(x)]
                                        Expression  [names(nl) <- colnames(x)]
                                            TokenOperator  [<- [1729...1731)]
                                                FunctionCall  [1719...1728)
                                                    Variable  [names]
                                                    TokenNode  [( [1724...1725)]
                                                    ArgumentList  [1725...1727)
                                                        ExpressionArgument  [1725...1727)
                                                            Expression  [nl]
                                                                Variable  [nl]
                                                    TokenNode  [) [1727...1728)]
                                                TokenNode  [<- [1729...1731)]
                                                FunctionCall  [1732...1743)
                                                    Variable  [colnames]
                                                    TokenNode  [( [1740...1741)]
                                                    ArgumentList  [1741...1742)
                                                        ExpressionArgument  [1741...1742)
                                                            Expression  [x]
                                                                Variable  [x]
                                                    TokenNode  [) [1742...1743)]
                                    ExpressionStatement  [vars <- eval(substitute(select), nl, parent.frame())]
                                        Expression  [vars <- eval(substitute(select), nl, parent.frame())]
                                            TokenOperator  [<- [1750...1752)]
                                                Variable  [vars]
                                                TokenNode  [<- [1750...1752)]
                                                FunctionCall  [1753...1797)
                                                    Variable  [eval]
                                                    TokenNode  [( [1757...1758)]
                                                    ArgumentList  [1758...1796)
                                                        ExpressionArgument  [1758...1777)
                                                            Expression  [substitute(select)]
                                                                FunctionCall  [1758...1776)
                                                                    Variable  [substitute]
                                                                    TokenNode  [( [1768...1769)]
                                                                    ArgumentList  [1769...1775)
                                                                        ExpressionArgument  [1769...1775)
                                                                            Expression  [select]
                                                                                Variable  [select]
                                                                    TokenNode  [) [1775...1776)]
                                                            TokenNode  [, [1776...1777)]
                                                        ExpressionArgument  [1778...1781)
                                                            Expression  [nl]
                                                                Variable  [nl]
                                                            TokenNode  [, [1780...1781)]
                                                        ExpressionArgument  [1782...1796)
                                                            Expression  [parent.frame()]
                                                                FunctionCall  [1782...1796)
                                                                    Variable  [parent.frame]
                                                                    TokenNode  [( [1794...1795)]
                                                                    TokenNode  [) [1795...1796)]
                                                    TokenNode  [) [1796...1797)]
                                    TokenNode  [} [1802...1803)]
                        If  []
                            TokenNode  [if [1808...1810)]
                            TokenNode  [( [1810...1811)]
                            Expression  [missing(subset)]
                                FunctionCall  [1811...1826)
                                    Variable  [missing]
                                    TokenNode  [( [1818...1819)]
                                    ArgumentList  [1819...1825)
                                        ExpressionArgument  [1819...1825)
                                            Expression  [subset]
                                                Variable  [subset]
                                    TokenNode  [) [1825...1826)]
                            TokenNode  [) [1826...1827)]
                            SimpleScope  [1828...1842)
                                ExpressionStatement  [subset <- TRUE]
                                    Expression  [subset <- TRUE]
                                        TokenOperator  [<- [1835...1837)]
                                            Variable  [subset]
                                            TokenNode  [<- [1835...1837)]
                                            LogicalValue  [TRUE [1838...1842)]
                            KeywordScopeStatement  []
                                TokenNode  [else [1847...1851)]
                                SimpleScope  [1852...1908)
                                    If  []
                                        TokenNode  [if [1852...1854)]
                                        TokenNode  [( [1854...1855)]
                                        Expression  [!is.logical(subset)]
                                            TokenOperator  [! [1855...1856)]
                                                TokenNode  [! [1855...1856)]
                                                FunctionCall  [1856...1874)
                                                    Variable  [is.logical]
                                                    TokenNode  [( [1866...1867)]
                                                    ArgumentList  [1867...1873)
                                                        ExpressionArgument  [1867...1873)
                                                            Expression  [subset]
                                                                Variable  [subset]
                                                    TokenNode  [) [1873...1874)]
                                        TokenNode  [) [1874...1875)]
                                        SimpleScope  [1876...1908)
                                            ExpressionStatement  [stop("'subset' must be logical")]
                                                Expression  [stop("'subset' must be logical")]
                                                    FunctionCall  [1876...1908)
                                                        Variable  [stop]
                                                        TokenNode  [( [1880...1881)]
                                                        ArgumentList  [1881...1907)
                                                            ExpressionArgument  [1881...1907)
                                                                Expression  ["'subset' must be logical"]
                                                                    Variable  ["'subset' must be logical"]
                                                        TokenNode  [) [1907...1908)]
                        ExpressionStatement  [x[subset & !is.na(subset), vars, drop = drop]]
                            Expression  [x[subset & !is.na(subset), vars, drop = drop]]
                                Indexer  [1913...1958)
                                    Variable  [x]
                                    TokenNode  [[ [1914...1915)]
                                    ArgumentList  [1915...1957)
                                        ExpressionArgument  [1915...1939)
                                            Expression  [subset & !is.na(subset)]
                                                TokenOperator  [& [1922...1923)]
                                                    Variable  [subset]
                                                    TokenNode  [& [1922...1923)]
                                                    TokenOperator  [! [1924...1925)]
                                                        TokenNode  [! [1924...1925)]
                                                        FunctionCall  [1925...1938)
                                                            Variable  [is.na]
                                                            TokenNode  [( [1930...1931)]
                                                            ArgumentList  [1931...1937)
                                                                ExpressionArgument  [1931...1937)
                                                                    Expression  [subset]
                                                                        Variable  [subset]
                                                            TokenNode  [) [1937...1938)]
                                            TokenNode  [, [1938...1939)]
                                        ExpressionArgument  [1940...1945)
                                            Expression  [vars]
                                                Variable  [vars]
                                            TokenNode  [, [1944...1945)]
                                        NamedArgument  [1946...1957)
                                            TokenNode  [drop [1946...1950)]
                                            TokenNode  [= [1951...1952)]
                                            Expression  [drop]
                                                Variable  [drop]
                                    TokenNode  [] [1957...1958)]
                        TokenNode  [} [1959...1960)]
    ExpressionStatement  [transform.data.frame <- function (`_data`, ...)\n{\n    e <- eval(substitute(list(...)), `_data`, parent.frame())\n    tags <- names(e)\n    inx <- match(tags, names(`_data`))\n    matched <- !is.na(inx)\n    if (any(matched)) {\n	`_data`[inx[matched]] <- e[matched]\n	`_data` <- data.frame(`_data`)\n    }\n    if (!all(matched))  # add as separate arguments to get replication\n	do.call("data.frame", c(list(`_data`), e[!matched]))\n    else `_data`\n}]
        Expression  [transform.data.frame <- function (`_data`, ...)\n{\n    e <- eval(substitute(list(...)), `_data`, parent.frame())\n    tags <- names(e)\n    inx <- match(tags, names(`_data`))\n    matched <- !is.na(inx)\n    if (any(matched)) {\n	`_data`[inx[matched]] <- e[matched]\n	`_data` <- data.frame(`_data`)\n    }\n    if (!all(matched))  # add as separate arguments to get replication\n	do.call("data.frame", c(list(`_data`), e[!matched]))\n    else `_data`\n}]
            TokenOperator  [<- [2136...2138)]
                Variable  [transform.data.frame]
                TokenNode  [<- [2136...2138)]
                FunctionDefinition  [2139...2556)
                    TokenNode  [function [2139...2147)]
                    TokenNode  [( [2148...2149)]
                    ArgumentList  [2149...2161)
                        ExpressionArgument  [2149...2157)
                            Expression  [`_data`]
                                Variable  [`_data`]
                            TokenNode  [, [2156...2157)]
                        EllipsisArgument  [...]
                            TokenNode  [... [2158...2161)]
                    TokenNode  [) [2161...2162)]
                    Scope  []
                        TokenNode  [{ [2163...2164)]
                        ExpressionStatement  [e <- eval(substitute(list(...)), `_data`, parent.frame())]
                            Expression  [e <- eval(substitute(list(...)), `_data`, parent.frame())]
                                TokenOperator  [<- [2171...2173)]
                                    Variable  [e]
                                    TokenNode  [<- [2171...2173)]
                                    FunctionCall  [2174...2226)
                                        Variable  [eval]
                                        TokenNode  [( [2178...2179)]
                                        ArgumentList  [2179...2225)
                                            ExpressionArgument  [2179...2201)
                                                Expression  [substitute(list(...))]
                                                    FunctionCall  [2179...2200)
                                                        Variable  [substitute]
                                                        TokenNode  [( [2189...2190)]
                                                        ArgumentList  [2190...2199)
                                                            ExpressionArgument  [2190...2199)
                                                                Expression  [list(...)]
                                                                    FunctionCall  [2190...2199)
                                                                        Variable  [list]
                                                                        TokenNode  [( [2194...2195)]
                                                                        ArgumentList  [2195...2198)
                                                                            EllipsisArgument  [...]
                                                                                TokenNode  [... [2195...2198)]
                                                                        TokenNode  [) [2198...2199)]
                                                        TokenNode  [) [2199...2200)]
                                                TokenNode  [, [2200...2201)]
                                            ExpressionArgument  [2202...2210)
                                                Expression  [`_data`]
                                                    Variable  [`_data`]
                                                TokenNode  [, [2209...2210)]
                                            ExpressionArgument  [2211...2225)
                                                Expression  [parent.frame()]
                                                    FunctionCall  [2211...2225)
                                                        Variable  [parent.frame]
                                                        TokenNode  [( [2223...2224)]
                                                        TokenNode  [) [2224...2225)]
                                        TokenNode  [) [2225...2226)]
                        ExpressionStatement  [tags <- names(e)]
                            Expression  [tags <- names(e)]
                                TokenOperator  [<- [2236...2238)]
                                    Variable  [tags]
                                    TokenNode  [<- [2236...2238)]
                                    FunctionCall  [2239...2247)
                                        Variable  [names]
                                        TokenNode  [( [2244...2245)]
                                        ArgumentList  [2245...2246)
                                            ExpressionArgument  [2245...2246)
                                                Expression  [e]
                                                    Variable  [e]
                                        TokenNode  [) [2246...2247)]
                        ExpressionStatement  [inx <- match(tags, names(`_data`))]
                            Expression  [inx <- match(tags, names(`_data`))]
                                TokenOperator  [<- [2256...2258)]
                                    Variable  [inx]
                                    TokenNode  [<- [2256...2258)]
                                    FunctionCall  [2259...2286)
                                        Variable  [match]
                                        TokenNode  [( [2264...2265)]
                                        ArgumentList  [2265...2285)
                                            ExpressionArgument  [2265...2270)
                                                Expression  [tags]
                                                    Variable  [tags]
                                                TokenNode  [, [2269...2270)]
                                            ExpressionArgument  [2271...2285)
                                                Expression  [names(`_data`)]
                                                    FunctionCall  [2271...2285)
                                                        Variable  [names]
                                                        TokenNode  [( [2276...2277)]
                                                        ArgumentList  [2277...2284)
                                                            ExpressionArgument  [2277...2284)
                                                                Expression  [`_data`]
                                                                    Variable  [`_data`]
                                                        TokenNode  [) [2284...2285)]
                                        TokenNode  [) [2285...2286)]
                        ExpressionStatement  [matched <- !is.na(inx)]
                            Expression  [matched <- !is.na(inx)]
                                TokenOperator  [<- [2299...2301)]
                                    Variable  [matched]
                                    TokenNode  [<- [2299...2301)]
                                    TokenOperator  [! [2302...2303)]
                                        TokenNode  [! [2302...2303)]
                                        FunctionCall  [2303...2313)
                                            Variable  [is.na]
                                            TokenNode  [( [2308...2309)]
                                            ArgumentList  [2309...2312)
                                                ExpressionArgument  [2309...2312)
                                                    Expression  [inx]
                                                        Variable  [inx]
                                            TokenNode  [) [2312...2313)]
                        If  []
                            TokenNode  [if [2318...2320)]
                            TokenNode  [( [2321...2322)]
                            Expression  [any(matched)]
                                FunctionCall  [2322...2334)
                                    Variable  [any]
                                    TokenNode  [( [2325...2326)]
                                    ArgumentList  [2326...2333)
                                        ExpressionArgument  [2326...2333)
                                            Expression  [matched]
                                                Variable  [matched]
                                    TokenNode  [) [2333...2334)]
                            TokenNode  [) [2334...2335)]
                            Scope  []
                                TokenNode  [{ [2336...2337)]
                                ExpressionStatement  [`_data`[inx[matched]] <- e[matched]]
                                    Expression  [`_data`[inx[matched]] <- e[matched]]
                                        TokenOperator  [<- [2361...2363)]
                                            Indexer  [2339...2360)
                                                Variable  [`_data`]
                                                TokenNode  [[ [2346...2347)]
                                                ArgumentList  [2347...2359)
                                                    ExpressionArgument  [2347...2359)
                                                        Expression  [inx[matched]]
                                                            Indexer  [2347...2359)
                                                                Variable  [inx]
                                                                TokenNode  [[ [2350...2351)]
                                                                ArgumentList  [2351...2358)
                                                                    ExpressionArgument  [2351...2358)
                                                                        Expression  [matched]
                                                                            Variable  [matched]
                                                                TokenNode  [] [2358...2359)]
                                                TokenNode  [] [2359...2360)]
                                            TokenNode  [<- [2361...2363)]
                                            Indexer  [2364...2374)
                                                Variable  [e]
                                                TokenNode  [[ [2365...2366)]
                                                ArgumentList  [2366...2373)
                                                    ExpressionArgument  [2366...2373)
                                                        Expression  [matched]
                                                            Variable  [matched]
                                                TokenNode  [] [2373...2374)]
                                ExpressionStatement  [`_data` <- data.frame(`_data`)]
                                    Expression  [`_data` <- data.frame(`_data`)]
                                        TokenOperator  [<- [2384...2386)]
                                            Variable  [`_data`]
                                            TokenNode  [<- [2384...2386)]
                                            FunctionCall  [2387...2406)
                                                Variable  [data.frame]
                                                TokenNode  [( [2397...2398)]
                                                ArgumentList  [2398...2405)
                                                    ExpressionArgument  [2398...2405)
                                                        Expression  [`_data`]
                                                            Variable  [`_data`]
                                                TokenNode  [) [2405...2406)]
                                TokenNode  [} [2411...2412)]
                        If  []
                            TokenNode  [if [2417...2419)]
                            TokenNode  [( [2420...2421)]
                            Expression  [!all(matched)]
                                TokenOperator  [! [2421...2422)]
                                    TokenNode  [! [2421...2422)]
                                    FunctionCall  [2422...2434)
                                        Variable  [all]
                                        TokenNode  [( [2425...2426)]
                                        ArgumentList  [2426...2433)
                                            ExpressionArgument  [2426...2433)
                                                Expression  [matched]
                                                    Variable  [matched]
                                        TokenNode  [) [2433...2434)]
                            TokenNode  [) [2434...2435)]
                            SimpleScope  [2485...2537)
                                ExpressionStatement  [do.call("data.frame", c(list(`_data`), e[!matched]))]
                                    Expression  [do.call("data.frame", c(list(`_data`), e[!matched]))]
                                        FunctionCall  [2485...2537)
                                            Variable  [do.call]
                                            TokenNode  [( [2492...2493)]
                                            ArgumentList  [2493...2536)
                                                ExpressionArgument  [2493...2506)
                                                    Expression  ["data.frame"]
                                                        Variable  ["data.frame"]
                                                    TokenNode  [, [2505...2506)]
                                                ExpressionArgument  [2507...2536)
                                                    Expression  [c(list(`_data`), e[!matched])]
                                                        FunctionCall  [2507...2536)
                                                            Variable  [c]
                                                            TokenNode  [( [2508...2509)]
                                                            ArgumentList  [2509...2535)
                                                                ExpressionArgument  [2509...2523)
                                                                    Expression  [list(`_data`)]
                                                                        FunctionCall  [2509...2522)
                                                                            Variable  [list]
                                                                            TokenNode  [( [2513...2514)]
                                                                            ArgumentList  [2514...2521)
                                                                                ExpressionArgument  [2514...2521)
                                                                                    Expression  [`_data`]
                                                                                        Variable  [`_data`]
                                                                            TokenNode  [) [2521...2522)]
                                                                    TokenNode  [, [2522...2523)]
                                                                ExpressionArgument  [2524...2535)
                                                                    Expression  [e[!matched]]
                                                                        Indexer  [2524...2535)
                                                                            Variable  [e]
                                                                            TokenNode  [[ [2525...2526)]
                                                                            ArgumentList  [2526...2534)
                                                                                ExpressionArgument  [2526...2534)
                                                                                    Expression  [!matched]
                                                                                        TokenOperator  [! [2526...2527)]
                                                                                            TokenNode  [! [2526...2527)]
                                                                                            Variable  [matched]
                                                                            TokenNode  [] [2534...2535)]
                                                            TokenNode  [) [2535...2536)]
                                            TokenNode  [) [2536...2537)]
                            KeywordScopeStatement  []
                                TokenNode  [else [2542...2546)]
                                SimpleScope  [2547...2554)
                                    ExpressionStatement  [`_data`]
                                        Expression  [`_data`]
                                            Variable  [`_data`]
                        TokenNode  [} [2555...2556)]
    ExpressionStatement  [transform <- function(`_data`,...) UseMethod("transform")]
        Expression  [transform <- function(`_data`,...) UseMethod("transform")]
            TokenOperator  [<- [2568...2570)]
                Variable  [transform]
                TokenNode  [<- [2568...2570)]
                FunctionDefinition  [2571...2615)
                    TokenNode  [function [2571...2579)]
                    TokenNode  [( [2579...2580)]
                    ArgumentList  [2580...2591)
                        ExpressionArgument  [2580...2588)
                            Expression  [`_data`]
                                Variable  [`_data`]
                            TokenNode  [, [2587...2588)]
                        EllipsisArgument  [...]
                            TokenNode  [... [2588...2591)]
                    TokenNode  [) [2591...2592)]
                    SimpleScope  [2593...2615)
                        ExpressionStatement  [UseMethod("transform")]
                            Expression  [UseMethod("transform")]
                                FunctionCall  [2593...2615)
                                    Variable  [UseMethod]
                                    TokenNode  [( [2602...2603)]
                                    ArgumentList  [2603...2614)
                                        ExpressionArgument  [2603...2614)
                                            Expression  ["transform"]
                                                Variable  ["transform"]
                                    TokenNode  [) [2614...2615)]
    ExpressionStatement  [transform.default <- function(`_data`,...)\n    transform.data.frame(data.frame(`_data`),...)]
        Expression  [transform.default <- function(`_data`,...)\n    transform.data.frame(data.frame(`_data`),...)]
            TokenOperator  [<- [2828...2830)]
                Variable  [transform.default]
                TokenNode  [<- [2828...2830)]
                FunctionDefinition  [2831...2902)
                    TokenNode  [function [2831...2839)]
                    TokenNode  [( [2839...2840)]
                    ArgumentList  [2840...2851)
                        ExpressionArgument  [2840...2848)
                            Expression  [`_data`]
                                Variable  [`_data`]
                            TokenNode  [, [2847...2848)]
                        EllipsisArgument  [...]
                            TokenNode  [... [2848...2851)]
                    TokenNode  [) [2851...2852)]
                    SimpleScope  [2857...2902)
                        ExpressionStatement  [transform.data.frame(data.frame(`_data`),...)]
                            Expression  [transform.data.frame(data.frame(`_data`),...)]
                                FunctionCall  [2857...2902)
                                    Variable  [transform.data.frame]
                                    TokenNode  [( [2877...2878)]
                                    ArgumentList  [2878...2901)
                                        ExpressionArgument  [2878...2898)
                                            Expression  [data.frame(`_data`)]
                                                FunctionCall  [2878...2897)
                                                    Variable  [data.frame]
                                                    TokenNode  [( [2888...2889)]
                                                    ArgumentList  [2889...2896)
                                                        ExpressionArgument  [2889...2896)
                                                            Expression  [`_data`]
                                                                Variable  [`_data`]
                                                    TokenNode  [) [2896...2897)]
                                            TokenNode  [, [2897...2898)]
                                        EllipsisArgument  [...]
                                            TokenNode  [... [2898...2901)]
                                    TokenNode  [) [2901...2902)]
