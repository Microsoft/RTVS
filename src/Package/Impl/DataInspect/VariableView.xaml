<UserControl x:Class="Microsoft.VisualStudio.R.Package.DataInspect.VariableView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:pkg="clr-namespace:Microsoft.VisualStudio.R.Package"
             xmlns:local="clr-namespace:Microsoft.VisualStudio.R.Package.DataInspect"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:img="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:imagecatalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.14.0"
             xmlns:core="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             img:ImageThemingUtilities.ImageBackgroundColor="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundColorKey}}"
             Foreground="{DynamicResource {x:Static vsui:CommonControlsColors.TextBoxTextBrushKey}}"
             HorizontalAlignment="Stretch"
             FocusManager.FocusedElement="{Binding ElementName=RootTreeGrid}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Microsoft.VisualStudio.R.Package;component/Wpf/Controls.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <local:MultiplyConverter x:Key="MultiplyConverter" />
            <local:BooleanToVisibilityConverter x:Key="HidingBoolToVisibilityConverter" ValueForTrue="Visible" ValueForFalse="Hidden" />
            <local:BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" ValueForTrue="Visible" ValueForFalse="Collapsed" />
            <core:Double x:Key="ExpanderToggleSize">16</core:Double>

            <Style x:Key="ExpanderToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Width" Value="{StaticResource ExpanderToggleSize}"/>
                <Setter Property="Height" Value="{StaticResource ExpanderToggleSize}"/>
                <Setter Property="Visibility" Value="{Binding HasChildren, Converter={StaticResource HidingBoolToVisibilityConverter}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="Transparent" Height="{TemplateBinding Height}" Padding="5" Width="{TemplateBinding Width}">
                                <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Stroke="{DynamicResource {x:Static vsui:TreeViewColors.GlyphBrushKey}}">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource {x:Static vsui:TreeViewColors.GlyphBrushKey}}"/>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource {x:Static vsui:TreeViewColors.GlyphBrushKey}}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource {x:Static vsui:TreeViewColors.GlyphMouseOverBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource {x:Static vsui:TreeViewColors.GlyphMouseOverBrushKey}}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource {x:Static vsui:TreeViewColors.GlyphMouseOverBrushKey}}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DataGridTextColumnElementStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <DataTemplate x:Key="NameCellTemplate">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle x:Name="Indentation" Grid.Column="0"
                                   Width="{Binding Depth, Converter={StaticResource MultiplyConverter}, ConverterParameter={StaticResource ExpanderToggleSize}}" />
                    <ToggleButton x:Name="Expander"
                              Grid.Column="1"
                              Style="{StaticResource ExpanderToggleStyle}"
                              ClickMode="Press" IsChecked="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <TextBlock Grid.Column="2" Text="{Binding Model.Content.Name}" VerticalAlignment="Center" />
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="ValueCellTemplate">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="{Binding Model.Content.Value}" VerticalAlignment="Center" HorizontalAlignment="Stretch" Grid.Column="0"/>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Column="1">
                        <Button
                            Visibility="{Binding Model.Content.CanShowDetail, Converter={StaticResource BoolToVisibilityConverter}}" Margin="1"
                            Command="{Binding Model.Content.ShowDetailCommand}" ToolTip="{Binding Model.Content.ShowDetailCommandTooltip}">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border x:Name="Border"  CornerRadius="3" BorderThickness="1"
                                        Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
                                        BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.GridLineBrushKey}}">
                                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static imagecatalog:KnownMonikers.Zoom}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="BorderBrush"
                                                Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowButtonHoverActiveBorderBrushKey}}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <Button
                            Visibility="{Binding Model.Content.CanShowOpenCsv, Converter={StaticResource BoolToVisibilityConverter}}" Margin="1"
                            Command="{Binding Model.Content.OpenInCsvAppCommand}" ToolTip="{Binding Model.Content.OpenInCsvAppCommandTooltip}">
                            <Button.Template>
                                <ControlTemplate>
                                    <Border x:Name="Border"  CornerRadius="3" BorderThickness="1"
                                        Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
                                        BorderBrush="{DynamicResource {x:Static vsui:EnvironmentColors.GridLineBrushKey}}">
                                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static imagecatalog:KnownMonikers.OfficeExcel2013}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="BorderBrush"
                                                Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowButtonHoverActiveBorderBrushKey}}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </StackPanel>
                </Grid>
            </DataTemplate>

            <Style TargetType="{x:Type local:TreeGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
                <Setter Property="SelectionMode" Value="Single" />
                <Setter Property="SelectionUnit" Value="FullRow" />
                <Setter Property="HeadersVisibility" Value="Column" />
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <ComboBox x:Name="EnvironmentComboBox" SelectionChanged="EnvironmentComboBox_SelectionChanged" Margin="4">
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Name}" />
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>

        <local:TreeGrid x:Name="RootTreeGrid" Grid.Row="1"
                  AutoGenerateColumns="False"
                  ScrollViewer.VerticalScrollBarVisibility="Visible"
                  IsReadOnly="True">
            <DataGrid.Columns>
                <DataGridTemplateColumn x:Name="NameColumn" Header="{x:Static pkg:Resources.VariableExplorer_NameHeader}" CellTemplate="{StaticResource NameCellTemplate}"
                                        Width="2*" 
                                        CanUserSort="True" SortMemberPath="DummyValue" />
                <DataGridTemplateColumn x:Name="ValueColumn" Header="{x:Static pkg:Resources.VariableExplorer_ValueHeader}" CellTemplate="{StaticResource ValueCellTemplate}" Width="3*" CanUserSort="False" />
                <DataGridTextColumn x:Name="ClassColumn" Header="{x:Static pkg:Resources.VariableExplorer_ClassHeader}" Binding="{Binding Model.Content.Class}" Width="*" CanUserSort="False"
                                    ElementStyle="{StaticResource DataGridTextColumnElementStyle}"/>
                <DataGridTextColumn x:Name="TypeColumn" Header="{x:Static pkg:Resources.VariableExplorer_TypeHeader}" Binding="{Binding Model.Content.TypeName}" Width="*" CanUserSort="False"
                                    ElementStyle="{StaticResource DataGridTextColumnElementStyle}"/>
            </DataGrid.Columns>
        </local:TreeGrid>
    </Grid>
</UserControl>
